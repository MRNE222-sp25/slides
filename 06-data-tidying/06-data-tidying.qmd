---
title: "Data tidying"
subtitle: "<br><br> Environmental Data Analysis and Visualization"
author: "[https://mrne222-sp25.github.io/website/](https://mrne222-sp25.github.io/website/)"
format: 
  revealjs:
    theme: simple
    width: 1500
    margin: 0.05
slide-number: c/t
from: markdown+emoji
editor: 
  markdown: 
    wrap: 72
execute:
  echo: true
---

## Tidy data

<br>
*Happy families are all alike; every unhappy family is unhappy in its own way.* 
<br>
<br>
-Leo Tolstoy

---

![Source: [Allison Horst](https://openscapes.org/blog/2020-10-12-tidy-data/)](img/horst_tidydata-messy.jpg)

---

![Source: [Allison Horst](https://openscapes.org/blog/2020-10-12-tidy-data/)](img/horst_tidydata.jpg)

---

## What makes this data not tidy?

![Source: [Army Air Forces Statistical Digest, WW II](https://www.ibiblio.org/hyperwar/AAF/StatDigest/aafsd-3.html)](img/hyperwar-airplanes.png){fig-align="center"}


## What makes this data not tidy?

![Source: [Gapminder, Estimated HIV prevalence among 15-49 year olds](https://www.gapminder.org/data)
](img/hiv-est-prevalence.png){fig-align="center"}


## What makes this data not tidy?

![Source: [US Census Fact Finder, General Economic Characteristics, ACS 2017](https://factfinder.census.gov/faces/tableservices/jsf/pages/productview.xhtml?pid=ACS_17_5YR_DP03&src=pt)](img/us-general-economic.png){fig-align="center"}


# What is the problem with "un-tidy" data?


## We need to wrangle to make the data tidy

![Source: [Allison Horst](https://openscapes.org/blog/2020-10-12-tidy-data/)](img/horst_tidydata-wrangle.jpg){fig-align="center"}

## We need tidy data to visualize and model

![Source: [Allison Horst](https://openscapes.org/blog/2020-10-12-tidy-data/)](img/horst_tidydata-pipeline.jpg){fig-align="center"}

## Data: Sales

```{r include=FALSE}
library(tidyverse)
customers <- read_csv("data/sales/customers.csv")
prices <- read_csv("data/sales/prices.csv")
```

::: {.columns}
::: {.column width = "50%" .fragment}
We have:
```{r echo=FALSE}
customers
```
:::
::: {.column width = "50%" .fragment}
We want:
```{r echo=FALSE}
customers |>
  pivot_longer(cols = item_1:item_3, names_to = "item_no", values_to = "item")
```
:::
:::

## A grammar of data tidying

::: {.columns}
::: {.column width = "25%"}
![](img/tidyr-part-of-tidyverse.png)
:::
::: {.column width="75%"}
The goal of `tidyr` is to help you tidy your data via:

- pivoting for reorganizing your data in wide or long format
- splitting and combining character columns
- nesting and unnesting columns
- clarifying how missing values (`NA`s) should be treated
:::
:::

# Pivoting data

## Wide vs. long format

::: {.columns}
::: {.column width = "50%"}
Wider: more columns
```{r echo=FALSE}
customers
```
:::
::: {.column width = "50%"}
Longer: more rows
```{r echo=FALSE}
customers |>
  pivot_longer(cols = item_1:item_3, names_to = "item_no", values_to = "item")
```
:::
:::

## `pivot_longer()`

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 80%;"}
- first argument is `data` (as usual)
:::
:::
::: {.column width = "50%"}
```{r eval=FALSE}
#| code-line-numbers: "1,2"

pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value"
  )
```
:::
:::

## `pivot_longer()` {visibility="uncounted"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 80%;"}
- first argument is `data` (as usual)
- `cols` argument: identify columns to pivot into longer format
:::
:::
::: {.column width = "50%"}
```{r eval=FALSE}
#| code-line-numbers: "1,2,3"

pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value"
  )
```
:::
:::

## `pivot_longer()` {visibility="uncounted"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 80%;"}
- first argument is `data` (as usual)
- `cols` argument: identify columns to pivot into longer format
- `names_to`: name of the new column that will be created by combining the columns identified by the `cols` argument (character string). Column will be populated with the colunn *names*.
:::
:::
::: {.column width = "50%"}
```{r eval=FALSE}
#| code-line-numbers: "1,2,3,4"

pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value"
  )
```
:::
:::

## `pivot_longer()` {visibility="uncounted"}

::: {.columns}
::: {.column width="50%"}
::: {style="font-size: 80%;"}
- first argument is `data` (as usual)
- `cols` argument: identify columns to pivot into longer format
- `names_to`: name of a new column that will be created by combining the columns identified by the `cols` argument (character string). Column will be populated with the colunn *names*.
- `values_to`: name of the new column where data from the pivoted columns go (character string). This column will be populated with the colunn *values*.
:::
:::
::: {.column width = "50%"}
```{r eval=FALSE}
#| code-line-numbers: "1,2,3,4,5,6"

pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value"
  )
```
:::
:::

## We want to go from wide to long format

::: {.columns}
::: {.column width = "50%"}
Wider: more columns
```{r}
customers
```
:::
::: {.column width = "50%"}
Longer: more rows
```{r echo = FALSE}
customers |>
  pivot_longer(cols = item_1:item_3, names_to = "item_no", values_to = "item")
```
:::
:::

## Customers $\rightarrow$ purchases

```{r}
#| code-line-numbers: "1,2|3|4|5,6"
purchases <- customers |> 
  pivot_longer( 
    cols = item_1:item_3,  # pivot these columns: item_1 to item_3 
    names_to = "item_no",  # new "names" column - let's call it "item_no" 
    values_to = "item"     # vew "values" column - let's call it "item" 
    ) 

purchases
```


## Use `pivot_wider` if you want to go from long to wide format

::: {.columns}
::: {.column width = "50%"}
- `data` (as usual)
- `names_from`: column in long format containing what should be column names in the wide format
- `values_from`: column in long format containing what should be values populating the new columns in the wide format
:::
::: {.column width = "50%"}
```{r}
purchases |>
  pivot_wider( 
    names_from = item_no, 
    values_from = item 
  ) 
```
:::
:::

## Pivoting from wide to long back to wide 

![](img/tidyr-longer-wider.gif)

## Case study: Approval rating of Donald Trump

![[Source: FiveThirtyEight](https://projects.fivethirtyeight.com/trump-approval-ratings/adults/)](img/trump-approval.png)


## Data

```{r include=FALSE}
trump <- read_csv("data/trump/trump.csv")
```

```{r}
trump
```

## Goal

::: {.columns}
::: {.column width = "60%"}
```{r echo=FALSE}
trump |>
  pivot_longer(
    cols = c(approval, disapproval),
    names_to = "rating_type",
    values_to = "rating_value"
  ) |>
  ggplot(aes(x = date, y = rating_value, 
             color = rating_type, group = rating_type)) +
  geom_line() +
  facet_wrap(~ subgroup) +
  scale_color_manual(values = c("darkgreen", "orange")) + 
  labs( 
    x = "Date", y = "Rating", 
    color = NULL, 
    title = "How (un)popular is Donald Trump?", 
    subtitle = "Estimates based on polls of all adults and polls of likely/registered voters", 
    caption = "Source: FiveThirtyEight modeling estimates" 
  ) + 
  theme_minimal() +
  theme(legend.position = "bottom")
```
:::
::: {.column width = "40%"}

**Aesthetic mappings:**  
`r emo::ji("check")`  x = `date`  
`r emo::ji("x")`      y = `rating_value`  
`r emo::ji("x")`      color = `rating_type`

**Facet:**  
`r emo::ji("check")`  `subgroup` (Adults and Voters)
:::
:::

## Pivot

::: {.columns}
::: {.column width = "50%"}
```{r approval-pivot, eval=FALSE}
trump_longer <- trump |> 
  pivot_longer(
    cols = c(approval, disapproval),
    names_to = "rating_type",
    values_to = "rating_value"
  )

trump_longer
```
:::
::: {.column width = "50%"}
```{r ref.label = "approval-pivot", echo = FALSE}
```
:::
:::

## Plot

```{r fig.asp = 0.5}
ggplot(trump_longer, 
       aes(x = date, y = rating_value, color = rating_type, group = rating_type)) +
  geom_line() +
  facet_wrap(~ subgroup)
```

## Pretty plot

::: {.panel-tabset}
## Plot
```{r ref.label = "approval-plot", echo = FALSE}
```

## Code
```{r approval-plot, eval=FALSE}
#| code-line-numbers: "6,7,8,9,10,11,12,13"

ggplot(trump_longer, 
       aes(x = date, y = rating_value, 
           color = rating_type, group = rating_type)) +
  geom_line() +
  facet_wrap(~ subgroup) +
  scale_color_manual(values = c("darkgreen", "orange")) +
  labs( 
    x = "Date", y = "Rating", 
    color = NULL, 
    title = "How (un)popular is Donald Trump?", 
    subtitle = "Estimates based on polls of all adults and polls of likely/registered voters",
    caption = "Source: FiveThirtyEight modeling estimates" 
  ) 
```
:::

## Change theme and legend position

::: {.panel-tabset}
## Plot
```{r ref.label = "approval-plot-theme", echo = FALSE}
```

## Code
```{r approval-plot-theme, eval=FALSE}
#| code-line-numbers: "14,15"

ggplot(trump_longer, 
       aes(x = date, y = rating_value, 
           color = rating_type, group = rating_type)) +
  geom_line() +
  facet_wrap(~ subgroup) +
  scale_color_manual(values = c("darkgreen", "orange")) +
  labs( 
    x = "Date", y = "Rating", 
    color = NULL, 
    title = "How (un)popular is Donald Trump?", 
    subtitle = "Estimates based on polls of all adults and polls of likely/registered voters",
    caption = "Source: FiveThirtyEight modeling estimates" 
  )  + 
  theme_minimal() + 
  theme(legend.position = "bottom")
```
:::

# More tidying functions

## Use `separate` if two (or more) variables are contained in one column

```{r}
table3
```


## Use `separate` if two (or more) variables are contained in one column

Use the `sep=` argument to identify the character that separates the two variables.
```{r}
table3 |>
  separate(rate, 
           into = c("cases", "population"), 
           sep = "/")
```
*Note that cases and population are character values.*


## Use `separate` if two (or more) variables are contained in one column

Use `convert = TRUE` to try and convert into a better data type.
```{r}
table3 |>
  separate(rate, 
           into = c("cases", "population"), 
           sep = "/", 
           convert = TRUE)
```
*Now cases and population are integers.*


## Use `unite` to gather data contained in two columns into one column

```{r}
table5
```


## Use `unite` to gather data contained in two columns into one column

```{r}
table5 |>
  unite(date, century, year)
```

*Note the default is to separate the two values with `_`.*


## Use `unite` to gather data contained in two columns into one column

Use `sep = ""` to remove the separator.
```{r}
table5 |>
  unite(date, century, year,
        sep = "") 
```

*Now the separator has been removed but date is a character.*


## Use `unite` to gather data contained in two columns into one column

`convert = TRUE` doesn't work with the `unite()` function, but we can wrangle further to coerce into a number.
```{r}
table5 |>
  unite(date, century, year,
        sep = "") |>
  mutate(date = as.integer(date))
```

*Now year is an integer.*


## Handling missing values



::: {.columns}
::: {.column width = "50%"}
How many missing values are in this dataset?
```{r, include = FALSE}
stocks <- tibble(
  year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  qtr    = c(   1,    2,    3,    4,    2,    3,    4),
  return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
```
:::
:::{.column width = "50%"}
```{r}
stocks
```
:::
:::


## Handling missing values

::: {.columns}
::: {.column}
How many missing values are in this dataset?

Two!

* Return for 2015 qtr 4 is made explicit with a NA
* Return for 2016 qtr 1 is implicitly missing because it is not included in the data
:::
::: {.column width = "50%"}

```{r, include = FALSE}
stocks <- tibble(
  year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  qtr    = c(   1,    2,    3,    4,    2,    3,    4),
  return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
```

```{r}
stocks
```
:::
:::

## Use `drop_na` if you do not want your data to include `NA`s

By including the `return` column as an argument, we drop all observations where `return` is `NA`
```{r}
stocks |>
  drop_na(return)
```


## Use `complete` to explicitly include all missing values

Output now includes returns for all possible combinations of `year` and `qtr`. `NA`s are added where they were not explicitly included.
```{r}
stocks |>
  complete(year, qtr)
```

