---
title: "Data and visualization"
subtitle: "<br><br> Environmental Data Analysis and Visualization"
author: "[https://mrne222-sp25.github.io/website/](https://mrne222-sp25.github.io/website/)"
format: 
  revealjs:
    theme: simple
    width: 1500
    margin: 0.05
slide-number: c/t
from: markdown+emoji
editor: 
  markdown: 
    wrap: 72
---

```{r packages, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(magick)
library(Tmisc)
library(dsbox)
library(palmerpenguins)
```

# What is in a dataset?

## Dataset terminology

-   Each row is an **observation**
-   Each column is a **variable**

# Let's look at a dataset more closely using `r emo::ji("penguin")`

## Data: Palmer Penguins

Data package containing measurements for penguin species, island in
Palmer Archipelago, size (flipper length, body mass, bill dimensions),
and sex

::: columns

::: {.column width = "25%"}

![](img/penguins.png)
:::

::: {.column width = "75%"}

```{r}
library(palmerpenguins)
glimpse(penguins)
```

:::

:::


## What's in the penguin data? - `glimpse` function

Use the `glimpse` function to see the column names, type of data in each column, and the first few observations or each column:

```{r include=TRUE, echo=TRUE}
glimpse(penguins)
```

## What's in the penguin data? - view in console

If the dataset is formatted as a tibble, you can type the name of the data object into the console and the output will include column names, data types, and the first 10 observations of each column
```{r echo=TRUE}
penguins
```


## What's in the penguins data? - get dimensions

You can use the `nrow`, `ncol`, and `dim` functions to get the dimenstions of a dataset.

```{r echo=TRUE}
nrow(penguins) # number of rows
ncol(penguins) # number of columns
dim(penguins)  # dimensions (row column)
```

# Exploratory data analysis

## What is exploratory data analysis (EDA)?

-   An approach to analyzing data sets to summarize its main
    characteristics

-   Often, this is visual -- this is what we'll focus on first

-   Might also calculate summary statistics and perform data
    wrangling/manipulation/transformation -- this is what we'll focus on
    next

# Data visualization

## Data visualization

*"The simple graph has brought more information to the data analyst's
mind than any other device."* 

-John Tukey

-   Data visualization is the creation and study of the visual
    representation of data

-   Many tools for visualizing data -- R is one of them

-   Many approaches/systems within R for making data visualizations --
    **ggplot2** is one of them, and that's what we're going to use

## ggplot2 is part of the tidyverse

::: {.columns}
::: {.column width = "30%"}

![](img/ggplot2-part-of-tidyverse.png)
:::

::: {.column width = "70%"}

-   **ggplot2** is tidyverse's data visualization package
-   `gg` in "ggplot2" stands for Grammar of Graphics
-   Inspired by the book **Grammar of Graphics** by Leland Wilkinson

:::

:::

## Grammar of Graphics

::: {.columns}

::: {.column width = "50%"}

A grammar of graphics is a tool that enables us to concisely describe
the components of a graphic

:::

::: {.column width = "50%"}

![](img/grammar-of-graphics.png) 

::: 

:::

Source:
[BloggoType](http://bloggotype.blogspot.com/2016/08/holiday-notes2-grammar-of-graphics.html)

------------------------------------------------------------------------

## Hello ggplot2!

-   `ggplot()` is the main function in ggplot2
-   Plots are constructed in layers
-   Structure of the code for plots can be summarized as

```{r echo=TRUE, eval=FALSE}
ggplot(data = [dataset], 
       mapping = aes(x = [x-variable], y = [y-variable])) +
   geom_xxx() +
   other options
```

## Hello ggplot2!

-   The ggplot2 package comes with the tidyverse

```{r echo=TRUE, eval=FALSE}
library(tidyverse)
```

-   For help with ggplot2, see
    [ggplot2.tidyverse.org](http://ggplot2.tidyverse.org/)
    
    
# Why do we visualize?


## Anscombe's quartet

::: {.columns}

::: {.column width="50%"}

```{r quartet-view1, echo = FALSE}
quartet[1:22,]
```
:::

::: {.column width="50%"}

```{r quartet-view2, echo = FALSE}
quartet[23:44,]
```

:::

:::

## Summarising Anscombe's quartet

```{r quartet-summary, echo=TRUE}
quartet %>%
  group_by(set) %>%
  summarise(
    mean_x = mean(x), 
    mean_y = mean(y),
    sd_x = sd(x),
    sd_y = sd(y),
    r = cor(x, y)
  )
```

## Visualizing Anscombe's quartet

```{r quartet-plot, echo = FALSE, out.width = "80%", fig.asp = 0.5}
ggplot(quartet, aes(x = x, y = y)) +
  geom_point() +
  facet_wrap(~ set, ncol = 4)
```

# Using the `ggplot()` function to visualize data`

---

## Our goal

::: panel-tabset
## Plot

```{r penguins-plot}
ggplot(data = penguins, 
       mapping = aes(x = bill_depth_mm, y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       colour = "Species")
```

## Code

```{r penguins, fig.show = "hide", echo=TRUE}
ggplot(data = penguins, 
       mapping = aes(x = bill_depth_mm, y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       colour = "Species")
```
:::

---

## Start with the `penguins` data frame.

::: {.columns}

::: {.column width = "50%"}

```{r penguins-0, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 1

ggplot(data = penguins)
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-0", echo=FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Map bill depth to the x-axis. {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-1, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 2

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm))
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-1", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Map bill length to the y-axis. {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-2, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 3

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm))
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-2", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Represent each observation with a point. {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-3, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 4

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm)) + 
  geom_point()
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-3", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Map species to the color of each point. {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-4, fig.show = "hide", warning = FALSE, echo=TRUE, message=FALSE}
#| code-line-numbers: 4

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point()
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-4", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Title the plot "Bill depth and length." {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-5, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 6

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length")
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-5", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Add the subtitle "Dimensions for Adelie, Chinstrap, and Gentoo Penguins." {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-6, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 7

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins")
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-6", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Label the x and y axes as "Bill depth (mm)" and "Bill length (mm)", respectively. {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-7, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 8

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)")
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-7", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Label the legend "Species." {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-8, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 9

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       colour = "Species") 
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-8", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Add a caption for the data source. {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-9, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 10

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       colour = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") 
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-9", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::


## Finally, use a color blind friendly discrete color scale. {visibility="uncounted"}

::: {.columns}
::: {.column width = "50%"}

```{r penguins-10, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 11

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       colour = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") +
  scale_colour_viridis_d()
```
:::

::: {.column width = "50%"}

```{r ref.label = "penguins-10", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 8}
```

:::

:::

---

::: panel-tabset

## Plot

```{r penguins-10-nohighlight, echo = FALSE, warning = FALSE}
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       colour = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") +
  scale_colour_viridis_d()
```

## Code

```{r penguins-10-plot, fig.show = "hide", echo=TRUE}
ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  labs(title = "Bill depth and length",
       subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
       x = "Bill depth (mm)", y = "Bill length (mm)",
       colour = "Species",
       caption = "Source: Palmer Station LTER / palmerpenguins package") +
  scale_colour_viridis_d()
```

## Narrative

Start with the `penguins` data frame, map bill depth to the x-axis and
map bill length to the y-axis. Represent each observation with a point and map species to the colour of
each point. Title the plot "Bill depth and length", add the subtitle "Dimensions for
Adelie, Chinstrap, and Gentoo Penguins", label the x and y axes as "Bill
depth (mm)" and "Bill length (mm)", respectively, label the legend
"Species", and add a caption for the data source. Finally, use a discrete colour scale that is designed to be perceived by viewers with common forms of colour blindness.

:::


## The `mapping = aes(...)` argument

You don't actually need to include the argument text `mapping = ...`  The code works with or without it, but most people omit it for the sake of brevity.

::: {.columns}

::: {.column width = "50%"}

This code does the same thing as...
```{r named-args, eval = FALSE, echo=TRUE}
#| code-line-numbers: "2,3,4"

ggplot(data = penguins,
       mapping = aes(x = bill_depth_mm,
                     y = bill_length_mm,
                     colour = species)) +
  geom_point() +
  scale_colour_viridis_d()
```
:::

::: {.column width="50%"}
...this code.
```{r not-named-args, eval = FALSE, echo=TRUE}
#| code-line-numbers: "2,3,4"

ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           colour = species)) +
  geom_point() +
  scale_colour_viridis_d()
```

:::

:::


# Plot aesthetics


## Aesthetic options

Commonly used visual aesthetics that can be
**mapped to a specific variable** in the data are

-   `color`
-   `shape`
-   `size`
-   `alpha` (transparency)


## Color

::: {.columns}

::: {.column width = "50%"}

```{r color, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: 4

ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species)) +
  geom_point() +
  scale_color_viridis_d()
```
:::

::: {.column width = "50%"}

```{r ref.label = "color", echo = FALSE, warning = FALSE}
```
:::
:::

------------------------------------------------------------------------

## Shape

Mapped to a different variable than `color`

::: {.columns}

::: {.column width = "50%"}

```{r shape-island, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: "4,5"

ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = island)) + 
  geom_point() +
  scale_color_viridis_d()
```

:::

::: {.column width = "50%"}

```{r ref.label = "shape-island", echo = FALSE, warning = FALSE, out.width = "100%"}
```

:::

:::

------------------------------------------------------------------------

## Shape

Mapped to same variable as `color`

::: {.columns}

::: {.column width = "50%"}

```{r shape-species, fig.show = "hide", warning = FALSE, echo=TRUE}
#| code-line-numbers: "4,5"
 
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species)) +
  geom_point() +
  scale_color_viridis_d()
```

:::

::: {.column width = "50%"}

```{r ref.label = "shape-species", echo = FALSE, warning = FALSE, out.width = "100%"}
```

:::

:::

------------------------------------------------------------------------

## Size

::: {.columns}

::: {.column width = "50%"}

```{r size, fig.show = "hide", warning = FALSE, echo=TRUE}
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species,
           size = body_mass_g)) + #<<
  geom_point() +
  scale_color_viridis_d()
```
:::

::: {.column width = "50%"}

```{r ref.label = "size", echo = FALSE, warning = FALSE, out.width = "100%"}
```
:::

:::


## Alpha

::: {.columns}

::: {.column width = "50%"}

```{r alpha, fig.show = "hide", warning = FALSE, echo=TRUE}
ggplot(penguins,
       aes(x = bill_depth_mm, 
           y = bill_length_mm,
           color = species,
           shape = species,
           size = body_mass_g,
           alpha = flipper_length_mm)) + #<<
  geom_point() +
  scale_color_viridis_d()
```
:::

::: {.column width = "50%"}

```{r ref.label = "alpha", echo = FALSE, warning = FALSE, out.width = "100%"}
```
:::

:::

------------------------------------------------------------------------

::: {.columns}

::: {.column width = "50%"}

**Mapping**

```{r warning = FALSE, out.width = "100%", echo=TRUE}
#| code-line-numbers: "4,5"

ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm,
           size = body_mass_g, 
           alpha = flipper_length_mm)) + 
  geom_point()
```

:::

::: {.column width = "50%"}

**Setting**

```{r warning = FALSE, out.width = "100%", echo=TRUE}
#| code-line-numbers: "4"

ggplot(penguins,
       aes(x = bill_depth_mm,
           y = bill_length_mm)) + 
  geom_point(size = 2, alpha = 0.5) 
```
:::

:::

------------------------------------------------------------------------

## Mapping vs. setting

**Mapping:** Define the size, alpha, etc. of points based on the
values of a variable in the data - goes into `aes()` (aesthetic mapping)

**Setting:** Define the size, alpha, etc. of points **not** based on
the values of a variable in the data - goes into `geom_*()` (this was
`geom_point()` in the previous example, but we'll learn about other
geoms soon!)


# Faceting


## Faceting

-   Smaller plots that display different subsets of the data
-   Useful for exploring conditional relationships and large data

------------------------------------------------------------------------

::: panel-tabset
## Plot

```{r ref.label = "facet", echo = FALSE, warning = FALSE, out.width = "70%"}
```

## Code

```{r facet, fig.show = "hide", echo=TRUE}
#| code-line-numbers: 3
#| 
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(species ~ island) 
```
:::

------------------------------------------------------------------------

## Various ways to facet

::: {.callout-note icon = FALSE}

## Question

In the next few slides describe what each plot displays. Think about how
the code relates to the output.

:::

Note: The plots in the next few slides do not have proper titles, axis
labels, etc. because we want you to figure out what's happening in the
plots. But you should always label your plots!

------------------------------------------------------------------------

```{r warning = FALSE, echo=TRUE}
#| code-line-numbers: 3

ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(species ~ sex)
```

------------------------------------------------------------------------

```{r warning = FALSE, echo=TRUE}
#| code-line-numbers: 3

ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(sex ~ species)
```

------------------------------------------------------------------------

```{r warning = FALSE, fig.asp = 0.5, echo=TRUE}
#| code-line-numbers: 3

ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_wrap(~ species)
```

------------------------------------------------------------------------

```{r warning = FALSE, fig.asp = 0.5, echo=TRUE}
#| code-line-numbers: 3

ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(. ~ species)
```

------------------------------------------------------------------------

```{r warning = FALSE, echo=TRUE}
#| code-line-numbers: 3

ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_wrap(~ species, ncol = 2)
```

------------------------------------------------------------------------

## Faceting summary

-   `facet_grid()`:
    -   2d grid
    -   `rows ~ cols`
-   `facet_wrap()`: 1d ribbon wrapped according to number of rows and
    columns specified or available plotting area
